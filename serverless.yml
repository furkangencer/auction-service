service:
  name: auction-service

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    AUTH0_PUBLIC_KEY: ${file(secret.pem)}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
  iamRoleStatements:
    - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
    - ${file(iam/MailQueueIAM.yml):MailQueueIAM}
    - ${file(iam/AuctionsBucketIAM.yml):AuctionsBucketIAM}

resources:
  # The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.
  # Resources are AWS infrastructure components which your Functions use such as:
    # An AWS DynamoDB Table (e.g., for saving Users/Posts/Comments data)
    # An AWS S3 Bucket (e.g., for saving images or files)
    # An AWS SNS Topic (e.g., for sending messages asynchronously)
    # Anything that can be defined in CloudFormation is supported by the Serverless Framework
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    AuctionsBucket: ${file(resources/AuctionsBucket.yml):AuctionsBucket}
    AuctionsBucketPolicy: ${file(resources/AuctionsBucket.yml):AuctionsBucketPolicy}

functions:
  auth:
    handler: src/handlers/auth.handler
    cors: true

  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      # Anything that triggers an AWS Lambda Function to execute is regarded by the Framework as an Event.
      # Events are infrastructure events on AWS such as:
        # An AWS API Gateway HTTP endpoint request (e.g., for a REST API)
        # An AWS S3 bucket upload (e.g., for an image)
        # A CloudWatch timer (e.g., run every 5 minutes)
        # An AWS SNS topic (e.g., a message)
        # A CloudWatch Alert (e.g., something happened)
        # And more...
      - http:
          method: POST
          path: /auction
          cors: true
          authorizer: auth

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions
          cors: true
          authorizer: auth

  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auction/{id}
          cors: true
          authorizer: auth

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid
          cors: true
          authorizer: auth

  uploadAuctionPicture:
    handler: src/handlers/uploadAuctionPicture.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/picture
          authorizer: auth

  processAuctions:
    handler: src/handlers/processAuctions.handler
    #events:
    #  - schedule: rate(1 minute)

custom:
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  MailQueue:
    # MailQueue stack belongs to another project and therefore created seperately. We just want to utilize it in this project.
    # For more info: https://github.com/petrucci53/notification-service
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
    name: auctions-bucket-5e467e98-${self:provider.stage}
  bundle:
    linting: false
